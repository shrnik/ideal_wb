# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttXnZkagPdHo29HUgWhlgNR6C6iYqmg-
"""

import torch
import pandas as pd
from datasets import Dataset, load_metric
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from transformers import (
    AutoTokenizer, AutoModelForSequenceClassification,
    TrainingArguments, Trainer, DataCollatorWithPadding
)
import numpy as np
from sklearn.metrics import accuracy_score, f1_score, classification_report

# Assumes columns: title, abstract, label
df = pd.read_csv("data/initial_data.csv")
df = df.dropna(subset=['Title', 'Abstract'])
df['text'] = "[TITLE] " + df['Title'] + " [ABSTRACT] " + df['Abstract']

df["text"].head()

df['label'] = df['Design'].fillna("other")
df['label'] = df['Design'].apply(
    lambda x: x.strip().lower() if isinstance(x, str) and x.strip() else "other")

counts = df['label'].value_counts()
valid_labels = counts[counts >= 2].index
df = df[df['label'].isin(valid_labels)]


# Auto-generate label mapping
label_encoder = LabelEncoder()
df['label_id'] = label_encoder.fit_transform(df['label'])
df['label_id'] = df['label_id'].astype(int)
# Save label mapping (optional)
label_map = dict(zip(label_encoder.classes_,
                 label_encoder.transform(label_encoder.classes_)))
print("Label Map:", label_map)

train_df, temp_df = train_test_split(
    df, test_size=0.2, stratify=df['label_id'], random_state=42
)

val_df, test_df = train_test_split(
    temp_df, test_size=0.5, stratify=temp_df['label_id'], random_state=42
)

num_labels = len(label_encoder.classes_)

MODEL_NAME = "allenai/scibert_scivocab_uncased"
model = AutoModelForSequenceClassification.from_pretrained(
    MODEL_NAME, num_labels=num_labels)

tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)


def tokenize_function(examples):
    return tokenizer(examples["text"], truncation=True, padding="max_length", max_length=512)


# Step 3: Convert to HuggingFace Datasets
train_ds = Dataset.from_pandas(train_df[['text', 'label_id']])
val_ds = Dataset.from_pandas(val_df[['text', 'label_id']])
test_ds = Dataset.from_pandas(test_df[['text', 'label_id']])

train_ds = train_ds.map(tokenize_function, batched=True)
train_ds = train_ds.rename_column("label_id", "labels")
val_ds = val_ds.map(tokenize_function, batched=True)
val_ds = val_ds.rename_column("label_id", "labels")
test_ds = test_ds.map(tokenize_function, batched=True)
test_ds = test_ds.rename_column("label_id", "labels")

train_ds


def compute_metrics(eval_pred):
    logits, labels = eval_pred
    preds = np.argmax(logits, axis=1)

    # Print classification report automatically
    print("\nClassification Report:")
    target_names = label_encoder.classes_  # adjust as needed
    print(classification_report(labels, preds, target_names=target_names))

    return {
        "accuracy": accuracy_score(labels, preds),
        "f1_macro": f1_score(labels, preds, average='macro'),
    }


training_args = TrainingArguments(
    output_dir="./dev-econ-classifier",
    eval_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=32,
    per_device_eval_batch_size=32,
    num_train_epochs=4,
    weight_decay=0.01,
    load_best_model_at_end=True,
    metric_for_best_model="f1_macro"
)

data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=val_ds,
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

torch.cuda.empty_cache()

# Step 7: Train the model
trainer.train()

# Step 8: Evaluate on test set
results = trainer.evaluate(test_ds)
print("Test Results:", results)

# Optional: Save model
model.save_pretrained("final-dev-econ-model")
tokenizer.save_pretrained("final-dev-econ-model")
